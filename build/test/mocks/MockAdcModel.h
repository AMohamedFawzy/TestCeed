/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKADCMODEL_H
#define _MOCKADCMODEL_H

#include "unity.h"
#include "AdcModel.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockAdcModel_Init(void);
void MockAdcModel_Destroy(void);
void MockAdcModel_Verify(void);




#define AdcModel_DoGetSample_IgnoreAndReturn(cmock_retval) AdcModel_DoGetSample_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void AdcModel_DoGetSample_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define AdcModel_DoGetSample_StopIgnore() AdcModel_DoGetSample_CMockStopIgnore()
void AdcModel_DoGetSample_CMockStopIgnore(void);
#define AdcModel_DoGetSample_ExpectAndReturn(cmock_retval) AdcModel_DoGetSample_CMockExpectAndReturn(__LINE__, cmock_retval)
void AdcModel_DoGetSample_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define AdcModel_ProcessInput_Ignore() AdcModel_ProcessInput_CMockIgnore()
void AdcModel_ProcessInput_CMockIgnore(void);
#define AdcModel_ProcessInput_StopIgnore() AdcModel_ProcessInput_CMockStopIgnore()
void AdcModel_ProcessInput_CMockStopIgnore(void);
#define AdcModel_ProcessInput_Expect(millivolts) AdcModel_ProcessInput_CMockExpect(__LINE__, millivolts)
void AdcModel_ProcessInput_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16 millivolts);
#define AdcModel_DoNothingExceptTestASpecialType_IgnoreAndReturn(cmock_retval) AdcModel_DoNothingExceptTestASpecialType_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void AdcModel_DoNothingExceptTestASpecialType_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define AdcModel_DoNothingExceptTestASpecialType_StopIgnore() AdcModel_DoNothingExceptTestASpecialType_CMockStopIgnore()
void AdcModel_DoNothingExceptTestASpecialType_CMockStopIgnore(void);
#define AdcModel_DoNothingExceptTestASpecialType_ExpectAndReturn(ExampleStruct, cmock_retval) AdcModel_DoNothingExceptTestASpecialType_CMockExpectAndReturn(__LINE__, ExampleStruct, cmock_retval)
void AdcModel_DoNothingExceptTestASpecialType_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, EXAMPLE_STRUCT_T ExampleStruct, bool cmock_to_return);
#define AdModel_DoNothingExceptTestPointers_IgnoreAndReturn(cmock_retval) AdModel_DoNothingExceptTestPointers_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void AdModel_DoNothingExceptTestPointers_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define AdModel_DoNothingExceptTestPointers_StopIgnore() AdModel_DoNothingExceptTestPointers_CMockStopIgnore()
void AdModel_DoNothingExceptTestPointers_CMockStopIgnore(void);
#define AdModel_DoNothingExceptTestPointers_ExpectAndReturn(pExample, cmock_retval) AdModel_DoNothingExceptTestPointers_CMockExpectAndReturn(__LINE__, pExample, cmock_retval)
void AdModel_DoNothingExceptTestPointers_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32* pExample, bool cmock_to_return);
#define AdcModel_DoNothingExceptReturnASpecialType_IgnoreAndReturn(cmock_retval) AdcModel_DoNothingExceptReturnASpecialType_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void AdcModel_DoNothingExceptReturnASpecialType_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, EXAMPLE_STRUCT_T cmock_to_return);
#define AdcModel_DoNothingExceptReturnASpecialType_StopIgnore() AdcModel_DoNothingExceptReturnASpecialType_CMockStopIgnore()
void AdcModel_DoNothingExceptReturnASpecialType_CMockStopIgnore(void);
#define AdcModel_DoNothingExceptReturnASpecialType_ExpectAndReturn(cmock_retval) AdcModel_DoNothingExceptReturnASpecialType_CMockExpectAndReturn(__LINE__, cmock_retval)
void AdcModel_DoNothingExceptReturnASpecialType_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, EXAMPLE_STRUCT_T cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif

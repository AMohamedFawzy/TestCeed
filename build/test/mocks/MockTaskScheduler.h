/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKTASKSCHEDULER_H
#define _MOCKTASKSCHEDULER_H

#include "unity.h"
#include "TaskScheduler.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockTaskScheduler_Init(void);
void MockTaskScheduler_Destroy(void);
void MockTaskScheduler_Verify(void);




#define TaskScheduler_Init_Ignore() TaskScheduler_Init_CMockIgnore()
void TaskScheduler_Init_CMockIgnore(void);
#define TaskScheduler_Init_StopIgnore() TaskScheduler_Init_CMockStopIgnore()
void TaskScheduler_Init_CMockStopIgnore(void);
#define TaskScheduler_Init_Expect() TaskScheduler_Init_CMockExpect(__LINE__)
void TaskScheduler_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define TaskScheduler_Update_Ignore() TaskScheduler_Update_CMockIgnore()
void TaskScheduler_Update_CMockIgnore(void);
#define TaskScheduler_Update_StopIgnore() TaskScheduler_Update_CMockStopIgnore()
void TaskScheduler_Update_CMockStopIgnore(void);
#define TaskScheduler_Update_Expect(time) TaskScheduler_Update_CMockExpect(__LINE__, time)
void TaskScheduler_Update_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32 time);
#define TaskScheduler_DoUsart_IgnoreAndReturn(cmock_retval) TaskScheduler_DoUsart_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void TaskScheduler_DoUsart_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define TaskScheduler_DoUsart_StopIgnore() TaskScheduler_DoUsart_CMockStopIgnore()
void TaskScheduler_DoUsart_CMockStopIgnore(void);
#define TaskScheduler_DoUsart_ExpectAndReturn(cmock_retval) TaskScheduler_DoUsart_CMockExpectAndReturn(__LINE__, cmock_retval)
void TaskScheduler_DoUsart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define TaskScheduler_DoAdc_IgnoreAndReturn(cmock_retval) TaskScheduler_DoAdc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void TaskScheduler_DoAdc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define TaskScheduler_DoAdc_StopIgnore() TaskScheduler_DoAdc_CMockStopIgnore()
void TaskScheduler_DoAdc_CMockStopIgnore(void);
#define TaskScheduler_DoAdc_ExpectAndReturn(cmock_retval) TaskScheduler_DoAdc_CMockExpectAndReturn(__LINE__, cmock_retval)
void TaskScheduler_DoAdc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
